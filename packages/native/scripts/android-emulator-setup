#!/usr/bin/env node

const fs = require('fs')
const path = require('path')

const { find, forEach } = require('lodash')
const iniBuilder = require('ini-builder')

const AVD_NAME = 'rnw-starter-native-emulator'
const AVD_CONFIG_PATH = path.resolve(process.env.HOME, '.android', 'avd', `${AVD_NAME}.avd`, 'config.ini')

const config = iniBuilder.parse(fs.readFileSync(AVD_CONFIG_PATH))

const updates = [
  { value: AVD_NAME, path: ['avd.ini.displayname'] },
  { value: AVD_NAME, path: ['AvdId'] },
  { value: '800M', path: ['disk.dataPartition.size'] },
  { value: false, path: ['hw.arc'] },
  { value: 'emulated', path: ['hw.camera.back'] },
  { value: 'emulated', path: ['hw.camera.front'] },
  { value: 4, path: ['hw.cpu.ncore'] },
  { value: 'yes', path: ['hw.gpu.enabled'] },
  { value: 'auto', path: ['hw.gpu.mode'] },
  { value: 'yes', path: ['hw.keyboard'] },
  { value: 1536, path: ['hw.ramSize'] },
  { value: 'none', path: ['runtime.network.latency'] },
  { value: 'full', path: ['runtime.network.speed'] },
  { value: '800M', path: ['sdcard.size'] },
  { value: 'yes', path: ['showDeviceFrame'] },
  { value: 'yes', path: ['skin.dynamic'] },
  // { value: 'nexus_5x', path: ['skin.name'] },
  // { value: 'skins/nexus_5x', path: ['skin.path'] },
  { value: 'no', path: ['snapshot.present'] },
  { value: 256, path: ['vm.heapSize'] },
]

forEach(
  updates,
  ({ path: configPath, value }) => {
    const item = find(config, { path: configPath })
    if (item == null) {
      config.push({ path: configPath, value })
    } else {
      item.value = value
    }
  }
)

fs.writeFileSync(AVD_CONFIG_PATH, iniBuilder.serialize(config))
